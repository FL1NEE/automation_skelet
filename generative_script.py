# -*- coding: utf-8 -*-
import re
import json
import requests
from typing import Any, Dict, Optional

API_KEY = "AIzaSyBa7D7aRpdPyv_M_1QecSUUqiIqVgGSx_Q"
URL = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-pro:generateContent?key={API_KEY}"
HEADERS = {"Content-Type": "application/json"}

PROMPT = """
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–ø—Ç-–≤–æ–ø—Ä–æ—Å –º–∏–Ω–∏–º—É–º –∏–∑ 50000 —Å–∏–º–≤–æ–ª–æ–≤
–ù–∞ —Ç–µ–º–∞—Ç–∏–∫—É: –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞

–û—Ç–≤–µ—Ç –¥–∞–π —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{
  "prompt_len": "–ö–û–õ–ò–ß–ï–°–¢–í–û –°–ò–ú–í–û–õ–û–í –í –¢–í–û–ï–ú –ü–†–û–ú–ü–¢-–û–¢–í–ï–¢–ï",
  "prompt": "–°–ê–ú –ü–†–û–ú–ü–¢ –û–¢ 50000 –°–ò–ú–í–û–õ–û–í –ú–ò–ù–ò–ú–£–ú –ù–ê –ê–ù–ì–õ–ò–ô–°–ö–û–ú –Ø–ó–´–ö–ï"
}
"""

def generate_crypto_prompt() -> Optional[Dict[str, Any]]:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ Gemini –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSON —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        dict: –°–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª—è "prompt_len" –∏ "prompt"
        None: –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∏–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ
    """
    payload = {
        "contents": [
            {"parts": [{"text": PROMPT}]}
        ]
    }

    try:
        resp = requests.post(URL, headers=HEADERS, data=json.dumps(payload))
        resp.raise_for_status()
    except requests.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Gemini API: {e}")
        return None

    try:
        resp_json = resp.json()
        text = resp_json["candidates"][0]["content"]["parts"][0]["text"].strip()

        # –£–±–∏—Ä–∞–µ–º markdown-–æ–≥—Ä–∞–∂–¥–µ–Ω–∏—è ```json ... ```
        text = re.sub(r"^```[a-zA-Z]*\n?", "", text)
        text = re.sub(r"```$", "", text)

        # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—É—é —Ñ–∏–≥—É—Ä–Ω—É—é —Å–∫–æ–±–∫—É
        idx = text.find("{")
        if idx > 0:
            text = text[idx:]

        result = json.loads(text)
        return result

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}")
        return None

# –ü—Ä–∏–º–µ—Ä –∑–∞–ø—É—Å–∫–∞ –º–æ–¥—É–ª—è
#if __name__ == "__main__":
#    data = generate_crypto_prompt()
#    if data:
#        print("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
#        print(f"üî¢ prompt_len: {data.get('prompt_len')}")
#        print(f"üß† –ü–µ—Ä–≤—ã–µ 300 —Å–∏–º–≤–æ–ª–æ–≤:\n{data.get('prompt', '')[:300]}...")
#    else:
#        print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–∞.")